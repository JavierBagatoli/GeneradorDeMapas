/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graficas;

import Logic.Mapa;
import java.awt.Color;
import java.awt.Graphics;
import static java.lang.Math.cos;
import static java.lang.Math.sin;

/**
 *
 * @author Ernesto
 */
public class GraficaCircular extends javax.swing.JFrame {

    /**
     * Creates new form GraficaCircular
     */
    int vectorX[] = new int[80];
    int vectorY[] = new int[80];
    /*
    public void generarBiomas(int[][] map, int[][] bio, int tH, int tV){
        for(int i = 0; i < 15; i++){
            int bioX = (int)(Math.random()*tH);
            int bioY = (int)(Math.random()*tV);

            bio[bioX][bioY] = 1;
        }
    }*/
    /*
    public void continuarEbrio(int[][] map, int posX, int posY){
        if (radialContinentes.isSelected()){
            int continuar = (int)(Math.random()*3);
            if ( continuar == 2){
                map[posX][posY]++;
                ebrio(map, posX, posY);
            }
        }
    }*/
    /*
    public void ebrio(int[][] map, int posX, int posY){
        if (posX > 0 && posY > 0 && posX < 122 && posY < 66){
            if (map[posX][posY] > map[posX-1][posY]){
                map[posX-1][posY] = map[posX][posY] -1;
                if ((int)(Math.random()*2+1) == 1 && posX > 2){
                    map[posX-1][posY-1] = map[posX][posY] -1;
                    map[posX-1][posY+1] = map[posX][posY] -1;
                    map[posX-2][posY] = map[posX][posY] -1;
                    continuarEbrio(map,posX-2,posY);
                }
            }
            if (map[posX][posY] > map[posX+1][posY]){
                map[posX+1][posY] = map[posX][posY] -1;
                if ((int)(Math.random()*2+1) == 1 && posX < 60){
                    map[posX+1][posY-1] = map[posX][posY] -1;
                    map[posX+1][posY+1] = map[posX][posY] -1;
                    map[posX+2][posY] = map[posX][posY] -1;
                    continuarEbrio(map,posX+2,posY);
                }
            }
            if (map[posX][posY] > map[posX][posY-1]){
                map[posX][posY-1] = map[posX][posY] -1;
                if ((int)(Math.random()*2+1) == 1 && posY > 2){
                    map[posX+1][posY-1] = map[posX][posY] -1;
                    map[posX-1][posY-1] = map[posX][posY] -1;
                    map[posX][posY-2] = map[posX][posY] -1;
                    continuarEbrio(map,posX,posY-2);
                }
            }
            if (map[posX][posY] > map[posX][posY+1]){
                map[posX][posY+1] = map[posX][posY] -1;
                if ((int)(Math.random()*2+1) == 1 && posY < 33){
                    map[posX+1][posY+1] = map[posX][posY] -1;
                    map[posX-1][posY+1] = map[posX][posY] -1;
                    map[posX][posY+2] = map[posX][posY] -1;
                    continuarEbrio(map,posX,posY+2);
                }
            }
        }
    }
       */
    public GraficaCircular() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    boolean bandera = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        spi_1 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spi_2 = new javax.swing.JSpinner();
        radialContinentes = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        radioBioma = new javax.swing.JRadioButton();
        butMostrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Mapa");

        jButton1.setText("Generar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(230, 230, 230));

        jLabel2.setText("Montes:");

        spi_1.setValue(7);

        jLabel3.setText("Altura:");

        spi_2.setValue(5);

        radialContinentes.setText("Continentes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radialContinentes)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spi_2)
                            .addComponent(spi_1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(96, 96, 96))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spi_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spi_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radialContinentes)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(230, 230, 230));

        radioBioma.setText("Biomas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(radioBioma)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(radioBioma)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        butMostrar.setText("Mostrar");
        butMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butMostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(butMostrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(291, 291, 291)
                .addComponent(jLabel1)
                .addGap(0, 318, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 368, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(butMostrar)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        bandera = true;
        repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void butMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butMostrarActionPerformed

    }//GEN-LAST:event_butMostrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficaCircular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficaCircular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficaCircular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficaCircular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GraficaCircular grafico = new GraficaCircular();
                grafico.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butMostrar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton radialContinentes;
    private javax.swing.JRadioButton radioBioma;
    private javax.swing.JSpinner spi_1;
    private javax.swing.JSpinner spi_2;
    // End of variables declaration//GEN-END:variables

    public void paint(Graphics g){
        super.paint(g);
        if(bandera == true){
            int bordesMapaX[] = {200,640,640,200};  //Valores de los vertices en X
            int bordesMapaY[] = {60,60,400,400};    //Valores de los vertices en Y
            /*int tH = 124;   //Tamaño horizontal del mapa
            int tV = 70;    //Tamaño vertical del mapa
            int mapa[][] = new int[tH][tV];     //Matriz que hace del mapa
            int biomas[][] = new int[tH][tV];   //Matriz que esta dedicada al bioma
            int catidadMontes   = (int)(spi_1.getValue());  //Variable dedicada a al cantidad de montes
            int alturaMonte     = (int)(spi_2.getValue());  //Variable dedicada a la altura esperdad de los montes

            for(int c = 0; c<catidadMontes;c++){
                int mx = (int)(Math.random()*58+2);
                int my = (int)(Math.random()*30+2);
                int alturaMinima = 1;
                if (radialContinentes.isSelected())
                    {alturaMinima = 2;}
                mapa[mx][my] = (int)(Math.random()*alturaMonte+alturaMinima+mapa[mx][my]);
                if (radialContinentes.isSelected()){//Generar cadenas montaniosas
                    int fT = (int)(Math.random()*4); //falla tectonica direccion
                    int fAlto = (int)(Math.random()*6+2); //Altura por encima del centro
                    int fBajo = (int)(Math.random()*6+2); //Altura por debajo del centro
                    switch(fT){
                        case 0 -> {
                            //vertical
                            for(int iAlto = 0; iAlto < fAlto; iAlto++){
                                if (my+iAlto < tV){
                                    mapa[mx][my+iAlto] = mapa[mx][my];
                                }
                            }
                            for(int iBajo = 0; iBajo < fBajo; iBajo++){
                                if (my-iBajo > 0){
                                    mapa[mx][my-iBajo] = mapa[mx][my];
                                }
                            }
                        }
                        case 1 -> {
                            //Horizontal
                            for(int iAlto = 0; iAlto < fAlto; iAlto++){
                                if (mx+iAlto < tH){
                                    mapa[mx+iAlto][my] = mapa[mx][my];
                                }
                            }
                            for(int iBajo = 0; iBajo < fBajo; iBajo++){
                                if (mx-iBajo > 0){
                                    mapa[mx-iBajo][my] = mapa[mx][my];
                                }
                            }
                        }
                        case 2 -> {
                            for(int iAlto = 0; iAlto < fAlto; iAlto++){
                                if (mx+iAlto < tH && my+iAlto < tV){
                                    mapa[mx+iAlto][my+iAlto] = mapa[mx][my];
                                }
                            }
                            for(int iBajo = 0; iBajo < fBajo; iBajo++){
                                if (mx-iBajo > 0 && my-iBajo > 0){
                                    mapa[mx-iBajo][my-iBajo] = mapa[mx][my];
                                }
                            }
                        }
                        default -> {
                                for(int iAlto = 0; iAlto < fAlto; iAlto++){
                                        if (mx+iAlto < tH && my+iAlto < tV){
                                                mapa[mx+iAlto][my+iAlto] = mapa[mx][my];
                                                }
                                        }
                                for(int iBajo = 0; iBajo < fBajo; iBajo++){
                                        if (mx-iBajo > 0 && my-iBajo > 0){
                                                mapa[mx-iBajo][my-iBajo] = mapa[mx][my];
                                                }
                                        }
                        }
                            
                    }
                }
            }*/
            Mapa map = new Mapa(124,70);
            map.setQuantityMounts((int)(spi_1.getValue()));
            map.setHeightMounts((int)(spi_2.getValue()));
            map.setIsContinent(radialContinentes.isSelected());
            int mapa[][] = map.generateMounts();
            int biome[][] = new int[map.getSizeX()][map.getSizeY()];
            
            g.setColor(new Color(0, 0, 0));
            g.drawPolygon(bordesMapaX, bordesMapaY, 4);
            //for(int c = 0; c<10;c++){
                for(int x = 0; x < map.getSizeX(); x++){
                    for(int y = 0; y < map.getSizeY(); y++){
                        //ebrio(mapa, x, y);
                        //biome[x][y] = 0;
            //            if (c == 9){
                            switch(mapa[x][y]){
                                case 0 -> g.setColor(new Color(35, 75, 249));
                                case 1 -> g.setColor(new Color(0, 150, 201));
                                case 2 -> g.setColor(new Color(0, 200, 143));
                                case 3 -> g.setColor(new Color(255, 209, 0));
                                case 4 -> g.setColor(new Color(255, 162, 0));
                                case 5 -> g.setColor(new Color(169, 120, 20));
                                case 6 -> g.setColor(new Color(169, 84, 8));
                                default -> g.setColor(Color.red);
                            }
                       // }
                    /*if (radioBioma.isSelected()){
                        generarBiomas(mapa,biome, map.getSizeX(), map.getSizeY());
                            switch(biome[x][y]){
                                case 1 -> g.setColor(new Color(0, 120, 0));
                            }
                        }*/
                        g.fillRect(x*10+20, y*10+50, 10, 10);
                        g.setColor(new Color(120, 120, 120));
                        g.drawRect(x*10+20, y*10+50, 10, 10);
                    }
                    //map.setMapBiome(biome);
                }
            //}
        }
    }
}
